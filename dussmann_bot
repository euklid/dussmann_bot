#!/bin/bash

uid=$1 					#User ID
pw=$2  					#Password
cookie="" 				#SessionID-Cookie
numweeks="" 				#number of available weeks
startweek=""				#start week
declare -a weeks 			#weeks in an array
declare -a monday
declare -a tuesday
declare -a wednesday	
declare -a thurday
declare -a friday
declare -a saturday
declare -a sunday	
menu1="" 				#index=1: food name index=2: food rating
menu2="" 				#the same
menu3="" 				#the same
ordering=""				#string send with curl for ordering the food
	
#Log in and get SessionID
curl -c tempcook.txt --data "Login_Name=$uid&Login_Passwort=$pw" www.dussmann-lpf.rcs.de/index.php?a=akt_login 

#extract SessionID
cookie=$(cat tempcook.txt |grep PHPSESSID | cut -d"D" -f2| cut -f2) 

#save menu in file
curl "www.dussmann-lpf.rcs.de/index.php?PHPSESSID=$cookie&m=1;3" > menuplan.txt

# get number of avialable weeks
numweeks=$(cat menuplan.txt | 
	grep -A100 "<select name=\"sel_woche\" class=\"no_print\" onchange=\"document.form_sel_woche.submit()\">"|
	grep KW| 
	cat -b| 
	tail -n 1| 
	cut -b 6) 

#get start week
startweek=$(cat menuplan.txt | 
	 grep -A100 "<select name=\"sel_woche\" class=\"no_print\" onchange=\"document.form_sel_woche.submit()\">"| 
	 grep KW| 
	 head -n 1| 
	 cut -d":" -f2| 
	 cut -d" " -f2 )


for ((i=0; i<$numweeks; i++))
do	
	echo "Willst du in der $((i+startweek)). Woche bestellen? Nur y oder n !!!" # ToDo: exception or try till y or n is typed in.
	read weeks[i]
	if [ $( echo ${weeks[i]} ) == "y" ]
	then 	
		echo "Alles bestellen?"
		read weeks[i]
	
		if [ $(echo ${weeks[i]} )  == "y" ]
		then	
			weeks[i]="y"
			monday[i]="y"
			tuesday[i]="y"
			wednesday[i]="y"
			thursday[i]="y"
			friday[i]="y"
			saturday[i]="y"
			sunday[i]="y"  
		else 	
			echo "Montag?"
		       	read monday[i]
		       	echo "Dienstag"?
		       	read tuesday[i]
		       	echo "Mittwoch?"
		       	read wednesday[i]
		       	echo "Donnerstag?"
		       	read thursday[i]
		       	echo "Freitag?"
		       	read friday[i]
		       	echo "Samstag?"
	  	      	read saturday[i]
		       	echo "Sonntag?"
		       	read sunday[i]	
		fi

		weeks[i]=$((i+startweek))   
	else 	
		weeks[i]="0" 
	fi    
done

for ((i=0;i<$numweeks; i++)) 
do	
	if [ $( echo ${weeks[$i]} ) != 0 ]
	then	#here the week's silly numbers are read
		weeks[$i]=$(cat menuplan.txt | 
			 grep -A100 "<select name=\"sel_woche\" class=\"no_print\" onchange=\"document.form_sel_woche.submit()\">"|
			 grep KW| cut -d"=" -f2- | 
			 grep "KW: ${weeks[$i]}" | 
			 cut -d"\"" -f2)     
	fi  
done

for ((i=0; i<numweeks ; i++))
do	
	if [ ${weeks[$i]}  != "0" ]
	then 	#creates a menu file for the menus in selected week
		curl --data "sel_woche=${weeks[$i]}" "www.dussmann-lpf.rcs.de/index.php?PHPSESSID=$cookie&m=1;3" > "menu$i" 
	
		if [ ${monday[$i]} == y ] #this sucking day problem will be solved with 2-dimensional array in c, this solution is bloody fucking shit
		then 	#extraction of menu name	
			menu1[1]=$(cat "$( echo "menu$(echo $i )" )"|
		       		grep auflistung| 
		        	grep _1_1| 
		       		cut -d">" -f2-| 
		       		cut -d">" -f2 | 
		       		head -n1| 
		       		cat -n | 
		       		grep 1| 
		       		cut -f2- )
			#; echo "${menu1[1]}"; echo "test" #just for check
		       	menu2[1]=$(cat "$( echo "menu$(echo $i )" )"|
		       		grep auflistung| 
		       		grep _1_2| 
		       		cut -d">" -f2-| 
		       		cut -d">" -f2 | 
		       		head -n1| 
		       		cat -n | 
		       		grep 1| 
		       		cut -f2- )
			echo "${menu2[1 ]} bla lies mich !!!!!!"	#for test purposes
		       	menu3[1]=$(cat "$( echo "menu$(echo $i )" )"|
		       		grep auflistung| 
		       		grep _1_3| 
		       		cut -d">" -f2-| 
		       		cut -d">" -f2 | 
		       		head -n1 |        
		       		cat -n | 
		       		grep 1| 
		       		cut -f2- )	
				# should the head -n1 disappear?? yes it can.

			 # comparison with favouritemenu file for each menu and then rating of food if menu not included in favouritemenu file

			if  cat favmenu | grep "$( echo "${menu1[1]}" )"
                	then #rating for menu1
                        	menu1[2]=$(cat favmenu | 
                                	grep "$( echo ${menu1[1]} )" | 
                                	cut -d" " -f1 )
                			#added delimiter and it works
                			# echo " bla ${menu1[2]}"

                	else
                        	echo "Wie bewertest du $( echo ${menu1[1]} ) ? rationale Skala von -2 bis 2."
                        	read menu1[2]
                        	# echo ${menu1[1]} #added this here for testing
                        	# echo ${menu1[2]} #the same
                        	echo "${menu1[2]} ${menu1[1]}" >> favmenu
                	fi
				
			if  cat favmenu | grep "$( echo "${menu2[1]}" )"
                        then #rating for menu2
                                menu2[2]=$(cat favmenu | 
                                        grep "$( echo ${menu2[1]} )" | 
                                        cut -d" " -f1 )
                                        #added delimiter and it works
                                        # echo " bla ${menu1[2]}"

                        else
                                echo "Wie bewertest du $( echo ${menu2[1]} ) ? rationale Skala von -2 bis 2."
                                read menu2[2]
                                # echo ${menu2[1]} #added this here for testing
                                # echo ${menu2[2]} #the same
                                echo "${menu2[2]} ${menu2[1]}" >> favmenu
                        fi

			if  cat favmenu | grep "$( echo "${menu3[1]}" )"
                        then #rating for menu3
                                menu3[2]=$(cat favmenu | 
                                        grep "$( echo ${menu3[1]} )" | 
                                        cut -d" " -f1 )
                                        #added delimiter and it works
                                        # echo " bla ${menu3[2]}"

                        else
                                echo "Wie bewertest du $( echo ${menu3[1]} ) ? rationale Skala von -2 bis 2."
                                read menu3[2]
                                # echo ${menu3[1]} #added this here for testing
                                # echo ${menu3[2]} #the same
                                echo "${menu3[2]} ${menu3[1]}" >> favmenu
                        fi
			
			# create compare file so that we can find the highest rated menu
                        echo "${menu1[2]} ${menu1[1]}"} > compare
			echo "${menu2[2]} ${menu2[1]}"} >> compare
			echo "${menu3[2]} ${menu3[1]}"} >> compare
			#store best food for monday in the i-th week	
			monday[$i]=$(sort -g -r compare| head -n1| cut -d" " -f2- )   
			# store silly name and its value of this food for ordering
                	monday[$i]=$(cat "menu$i"| grep -A 3 "$(echo ${monday[$i]})"|grep value | cut -d" " -f3-4 )          
		
		# if no food for this day is wanted for ordering the value of day[$i] is still unequal "y" --> ToDo: change "not y" to 0 for unified sign of not chosen
 		fi
		
#		if  cat favmenu | grep "$( echo "${menu1[1]}" )" 
		# comparison with favouritemenu file for each menu and then rating of food if menu not included in favouritemenu file
#		then 	
#			menu1[2]=$(cat favmenu | 
#				grep "$( echo ${menu1[1]} )" | 
#				cut -d" " -f1 ) 
#		#added delimiter and it works
#		# echo " bla ${menu1[2]}"
#
#		else 	
#			echo "Wie bewertest du $( echo ${menu1[1]} ) ? rationale Skala von -2 bis 2."
#		       	read menu1[2]
#		      	# echo ${menu1[1]} #added this here for testing
#		      	# echo ${menu1[2]} #the same
#		       	echo "${menu1[2]} ${menu1[1]}" >> favmenu 
#		fi
#
	fi
	
# echo "${weeks[$i]}" # just checking
done

# now the ordering routine
for((i=0; i<$startweek; i++)) # starttag????
do
	if [ ${monday[i]} != n ] #ToDo: use the unequality for the unified 0 if unification is done  
	then	#adds name of menu and its value plus always ordering dessert
		ordering=$( echo "$ordering"&"$( $(echo ${monday[i]})| cut -d"\"" -f2 )"="$( $(echo ${monday[i]})| cut -d"\"" -f4 )"&"$( echo fld_"$(echo ${monday[i]})"| cut -d"\"" -f2 )"=1 ) 
	fi 
done

for((i=0; i<$startweek; i++))
do	
	echo ${weeks[$i]}
done
